generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categoria {
  id           Int       @id @unique(map: "Categoria_id_key") @default(autoincrement())
  descricao    String    @unique(map: "Categoria_descricao_key") @db.VarChar(45)
  criadoEm     DateTime  @default(now())
  atualizadoEm DateTime  @default(now())
  criadorId    Int
  produto      produto[]
}

model cliente {
  id           Int      @id @unique(map: "Cliente_id_key") @default(autoincrement())
  nome         String   @db.VarChar(70)
  cnpjCpf      String   @unique(map: "Cliente_cnpjCpf_key") @db.VarChar(20)
  endereco     String   @db.VarChar(80)
  telefone     String   @db.VarChar(13)
  email        String   @unique(map: "Cliente_email_key") @db.VarChar(70)
  criadorId    Int
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @default(now())
  pedido       pedido[]
}

model fornecedor {
  id                Int                 @id @unique(map: "Fornecedor_id_key") @default(autoincrement())
  nome              String              @db.VarChar(70)
  cnpj              String              @unique(map: "Fornecedor_cnpj_key")
  telefone          String              @db.VarChar(13)
  email             String              @db.VarChar(70)
  criadoEm          DateTime            @default(now())
  atualizadoEm      DateTime
  criadorId         Int
  produto           produto?
  produtofornecedor produtofornecedor[]
}

model itempedido {
  id         Int      @id @unique(map: "ItemPedido_id_key") @default(autoincrement())
  data       DateTime @default(now())
  quantidade Int
  valorTotal Float
  produtoId  Int
  pedidoId   Int
  pedido     pedido   @relation(fields: [pedidoId], references: [id], map: "ItemPedido_pedidoId_fkey")
  produto    produto  @relation(fields: [produtoId], references: [id], map: "ItemPedido_produtoId_fkey")

  @@unique([produtoId, pedidoId], map: "ItemPedido_produtoId_pedidoId_key")
  @@index([pedidoId], map: "ItemPedido_pedidoId_fkey")
}

model medida {
  id           Int       @id @unique(map: "Medida_id_key") @default(autoincrement())
  descricao    String    @unique(map: "Medida_descricao_key")
  criadoEm     DateTime  @default(now())
  atualizadoEm DateTime  @default(now())
  produto      produto[]
}

model movimentacaoestoque {
  id               Int                      @id @unique(map: "MovimentacaoEstoque_id_key") @default(autoincrement())
  produtoId        Int
  tipo             movimentacaoestoque_tipo
  quantidade       Int
  dataMovimentacao DateTime                 @default(now())
  observacao       String?                  @db.VarChar(255)
  criadorId        Int
  produto          produto                  @relation(fields: [produtoId], references: [id], map: "MovimentacaoEstoque_produtoId_fkey")

  @@index([produtoId], map: "MovimentacaoEstoque_produtoId_fkey")
}

model pedido {
  id         Int           @id @unique(map: "Pedido_id_key") @default(autoincrement())
  dataPedido DateTime      @default(now())
  clienteId  Int
  status     pedido_status @default(PENDENTE)
  itempedido itempedido[]
  cliente    cliente       @relation(fields: [clienteId], references: [id], map: "Pedido_clienteId_fkey")

  @@index([clienteId], map: "Pedido_clienteId_fkey")
}

model produto {
  id                  Int                   @id @unique(map: "Produto_id_key") @default(autoincrement())
  descricao           String                @unique(map: "Produto_descricao_key") @db.VarChar(70)
  precoCompra         Float
  valorUn             Float
  categoriaId         Int
  quantidade          Int
  criadoEm            DateTime              @default(now())
  atualizadoEm        DateTime
  criadorId           Int
  medidaId            Int
  fornecedorId        Int                   @unique
  itempedido          itempedido[]
  movimentacaoestoque movimentacaoestoque[]
  categoria           categoria             @relation(fields: [categoriaId], references: [id], map: "Produto_categoriaId_fkey")
  medida              medida                @relation(fields: [medidaId], references: [id], map: "Produto_medidaId_fkey")
  fornecedor          fornecedor            @relation(fields: [fornecedorId], references: [id])
  produtofornecedor   produtofornecedor[]

  @@index([categoriaId], map: "Produto_categoriaId_fkey")
  @@index([medidaId], map: "Produto_medidaId_fkey")
}

model produtofornecedor {
  id           Int        @id @unique(map: "ProdutoFornecedor_id_key") @default(autoincrement())
  produtoId    Int
  fornecedorId Int
  precoCompra  Float
  criadoEm     DateTime   @default(now())
  atualizadoEm DateTime   @default(now())
  criadorId    Int
  fornecedor   fornecedor @relation(fields: [fornecedorId], references: [id], map: "ProdutoFornecedor_fornecedorId_fkey")
  produto      produto    @relation(fields: [produtoId], references: [id], map: "ProdutoFornecedor_produtoId_fkey")

  @@index([fornecedorId], map: "ProdutoFornecedor_fornecedorId_fkey")
  @@index([produtoId], map: "ProdutoFornecedor_produtoId_fkey")
}

model usuario {
  id           Int      @id @unique(map: "Usuario_id_key") @default(autoincrement())
  nome         String   @db.VarChar(70)
  email        String   @unique(map: "Usuario_email_key") @db.VarChar(70)
  senha        String   @db.VarChar(100)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @default(now())
  role         String   @default("user")
}

enum movimentacaoestoque_tipo {
  ENTRADA
  SAIDA
}

enum pedido_status {
  PENDENTE
  EM_ANDAMENTO
  FINALIZADO
  CANCELADO
}
